/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './select';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/view_container';
import * as import10 from '@angular/core/src/linker/query_list';
import * as import11 from '../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import12 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import13 from '../../node_modules/@angular/forms/src/directives/select_control_value_accessor.ngfactory';
import * as import14 from '../../node_modules/@angular/forms/src/directives/reactive_directives/form_control_directive.ngfactory';
import * as import15 from '../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import16 from '../../node_modules/@angular/forms/src/directives/select_multiple_control_value_accessor.ngfactory';
import * as import17 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import18 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import19 from '@angular/core/src/linker/element_ref';
import * as import20 from '@angular/core/src/linker/template_ref';
import * as import21 from '@angular/common/src/directives/ng_if';
import * as import22 from '@angular/forms/src/directives/select_control_value_accessor';
import * as import23 from '@angular/forms/src/directives/select_multiple_control_value_accessor';
import * as import24 from '@angular/forms/src/directives/control_value_accessor';
import * as import25 from '@angular/forms/src/directives/reactive_directives/form_control_directive';
import * as import26 from '@angular/forms/src/directives/ng_control';
import * as import27 from '@angular/forms/src/directives/ng_control_status';
import * as import28 from '@angular/common/src/directives/ng_class';
export class Wrapper_SemanticSelectComponent {
  /*private*/ _eventHandler:Function;
  context:import0.SemanticSelectComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  subscription0:any;
  subscription1:any;
  constructor() {
    this._changed = false;
    this.context = new import0.SemanticSelectComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_control(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.control = currValue;
      this._expr_0 = currValue;
    }
  }
  check_class(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.class = currValue;
      this._expr_1 = currValue;
    }
  }
  check_label(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.label = currValue;
      this._expr_2 = currValue;
    }
  }
  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.options = currValue;
      this._expr_3 = currValue;
    }
  }
  check_placeholder(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.placeholder = currValue;
      this._expr_4 = currValue;
    }
  }
  check_model(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.model = currValue;
      this._expr_5 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.modelChange.subscribe(_eventHandler.bind(view,'modelChange'))); }
    if (emit1) { (this.subscription1 = this.context.onChange.subscribe(_eventHandler.bind(view,'onChange'))); }
  }
}
var renderType_SemanticSelectComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_SemanticSelectComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.SemanticSelectComponent>;
  _SemanticSelectComponent_0_3:Wrapper_SemanticSelectComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_SemanticSelectComponent_Host0,renderType_SemanticSelectComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'sm-select',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_SemanticSelectComponent0(this.viewUtils,this,0,this._el_0);
    this._SemanticSelectComponent_0_3 = new Wrapper_SemanticSelectComponent();
    this.compView_0.create(this._SemanticSelectComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._SemanticSelectComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.SemanticSelectComponent) && (0 === requestNodeIndex))) { return this._SemanticSelectComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._SemanticSelectComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._SemanticSelectComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._SemanticSelectComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const SemanticSelectComponentNgFactory:import8.ComponentFactory<import0.SemanticSelectComponent> = new import8.ComponentFactory<import0.SemanticSelectComponent>('sm-select',View_SemanticSelectComponent_Host0,import0.SemanticSelectComponent);
const styles_SemanticSelectComponent:any[] = ([] as any[]);
class View_SemanticSelectComponent1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {
    super(View_SemanticSelectComponent1,renderType_SemanticSelectComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_2 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'label',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2:any = import3.inlineInterpolate(1,'',this.parentView.context.label,'');
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setText(this._text_1,currVal_2);
      this._expr_2 = currVal_2;
    }
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_SemanticSelectComponent:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.None,styles_SemanticSelectComponent,{});
export class View_SemanticSelectComponent0 extends import2.AppView<import0.SemanticSelectComponent> {
  _viewQuery_select_0:import10.QueryList<any>;
  _el_0:any;
  _NgClass_0_3:import11.Wrapper_NgClass;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import9.ViewContainer;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import12.Wrapper_NgIf;
  _text_3:any;
  _el_4:any;
  _SelectControlValueAccessor_4_3:import13.Wrapper_SelectControlValueAccessor;
  _NG_VALUE_ACCESSOR_4_4:any[];
  _FormControlDirective_4_5:import14.Wrapper_FormControlDirective;
  _NgControl_4_6:any;
  _NgControlStatus_4_7:import15.Wrapper_NgControlStatus;
  _text_5:any;
  _el_6:any;
  _NgSelectOption_6_3:import13.Wrapper_NgSelectOption;
  _NgSelectMultipleOption_6_4:import16.Wrapper_NgSelectMultipleOption;
  _text_7:any;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  _map_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_SemanticSelectComponent0,renderType_SemanticSelectComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce);
    this._map_23 = import3.pureProxy1((p0:any):{[key: string]:any} => {
      return {error: p0};
    });
    this._expr_24 = import1.UNINITIALIZED;
    this._expr_25 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_select_0 = new import10.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','field'),(null as any));
    this._NgClass_0_3 = new import11.Wrapper_NgClass(this.parentView.injectorGet(import17.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import18.KeyValueDiffers,this.parentIndex),new import19.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._vc_2 = new import9.ViewContainer(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import20.TemplateRef_(this,2,this._anchor_2);
    this._NgIf_2_6 = new import12.Wrapper_NgIf(this._vc_2.vcRef,this._TemplateRef_2_5);
    this._text_3 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_0,'select',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._SelectControlValueAccessor_4_3 = new import13.Wrapper_SelectControlValueAccessor(this.renderer,new import19.ElementRef(this._el_4));
    this._NG_VALUE_ACCESSOR_4_4 = [this._SelectControlValueAccessor_4_3.context];
    this._FormControlDirective_4_5 = new import14.Wrapper_FormControlDirective((null as any),(null as any),this._NG_VALUE_ACCESSOR_4_4);
    this._NgControl_4_6 = this._FormControlDirective_4_5.context;
    this._NgControlStatus_4_7 = new import15.Wrapper_NgControlStatus(this._NgControl_4_6);
    this._text_5 = this.renderer.createText(this._el_4,'\n    ',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,this._el_4,'option',new import3.InlineArray2(2,'value',''),(null as any));
    this._NgSelectOption_6_3 = new import13.Wrapper_NgSelectOption(new import19.ElementRef(this._el_6),this.renderer,this._SelectControlValueAccessor_4_3.context);
    this._NgSelectMultipleOption_6_4 = new import16.Wrapper_NgSelectMultipleOption(new import19.ElementRef(this._el_6),this.renderer,(null as any));
    this._text_7 = this.renderer.createText(this._el_6,'',(null as any));
    this._text_8 = this.renderer.createText(this._el_4,'\n    ',(null as any));
    this.projectNodes(this._el_4,0);
    this._text_9 = this.renderer.createText(this._el_4,'\n',(null as any));
    this._text_10 = this.renderer.createText(this._el_0,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_4,new import3.InlineArray4(4,'change',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_4));
    this._viewQuery_select_0.reset([new import19.ElementRef(this._el_4)]);
    this.context.select = this._viewQuery_select_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._text_8,
      this._text_9,
      this._text_10
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import20.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import21.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    if (((token === import22.NgSelectOption) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._NgSelectOption_6_3.context; }
    if (((token === import23.NgSelectMultipleOption) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._NgSelectMultipleOption_6_4.context; }
    if (((token === import22.SelectControlValueAccessor) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._SelectControlValueAccessor_4_3.context; }
    if (((token === import24.NG_VALUE_ACCESSOR) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._NG_VALUE_ACCESSOR_4_4; }
    if (((token === import25.FormControlDirective) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._FormControlDirective_4_5.context; }
    if (((token === import26.NgControl) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._NgControl_4_6; }
    if (((token === import27.NgControlStatus) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._NgControlStatus_4_7.context; }
    if (((token === import28.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 10)))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'field';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this._map_23((!((this.context.control == null)? (null as any): this.context.control.valid) && ((this.context.control == null)? (null as any): this.context.control.touched)));
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2_0_0:any = this.context.label;
    this._NgIf_2_6.check_ngIf(currVal_2_0_0,throwOnChange,false);
    this._NgIf_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._SelectControlValueAccessor_4_3.ngDoCheck(this,this._el_4,throwOnChange);
    const currVal_4_1_0:any = this.context.control;
    this._FormControlDirective_4_5.check_form(currVal_4_1_0,throwOnChange,false);
    this._FormControlDirective_4_5.ngDoCheck(this,this._el_4,throwOnChange);
    this._NgControlStatus_4_7.ngDoCheck(this,this._el_4,throwOnChange);
    const currVal_6_0_0:any = '';
    this._NgSelectOption_6_3.check_value(currVal_6_0_0,throwOnChange,false);
    this._NgSelectOption_6_3.ngDoCheck(this,this._el_6,throwOnChange);
    const currVal_6_1_0:any = '';
    this._NgSelectMultipleOption_6_4.check_value(currVal_6_1_0,throwOnChange,false);
    this._NgSelectMultipleOption_6_4.ngDoCheck(this,this._el_6,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    const currVal_24:any = import3.inlineInterpolate(1,'ui ',this.context.class,' dropdown');
    if (import3.checkBinding(throwOnChange,this._expr_24,currVal_24)) {
      this.renderer.setElementProperty(this._el_4,'className',currVal_24);
      this._expr_24 = currVal_24;
    }
    this._NgControlStatus_4_7.checkHost(this,this,this._el_4,throwOnChange);
    const currVal_25:any = import3.inlineInterpolate(1,'',this.context.placeholder,'');
    if (import3.checkBinding(throwOnChange,this._expr_25,currVal_25)) {
      this.renderer.setText(this._text_7,currVal_25);
      this._expr_25 = currVal_25;
    }
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this._NgSelectOption_6_3.ngOnDestroy();
    this._NgSelectMultipleOption_6_4.ngOnDestroy();
    this._FormControlDirective_4_5.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_SemanticSelectComponent1(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._SelectControlValueAccessor_4_3.handleEvent(eventName,$event) && result);
    return result;
  }
}